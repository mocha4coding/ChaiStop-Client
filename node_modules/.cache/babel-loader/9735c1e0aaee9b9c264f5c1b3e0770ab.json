{"ast":null,"code":"var _jsxFileName = \"E:\\\\ENGAGE\\\\practice\\\\client\\\\src\\\\Comments.js\";\n// import TimeAgo from 'timeago-react';\n//import { ChatAltIcon } from \"@heroicons/react/outline\";\n//import { useState , useContext} from 'react';\nimport Comment from './Comment'; //import CommentForm from './CommentForm';\n//import RootCommentContext from './RootCommentContext';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Comments(props) {\n  // const [showCommentForm, setShowCommentForm] = useState(false);\n  // const comments = props.comments.filter(comment => props.parentId === comment.parentId);\n  // const rootCommentInfo = useContext(RootCommentContext);\n  const commentId = props.match.params.id;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: '',\n    children: /*#__PURE__*/_jsxDEV(Comment, {\n      id: commentId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["E:/ENGAGE/practice/client/src/Comments.js"],"names":["Comment","Comments","props","commentId","match","params","id"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,OAAP,MAAoB,WAApB,C,CACA;AACA;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAErB;AAEA;AACA;AACA,QAAMC,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,EAArC;AACA,sBACE;AAAK,IAAA,SAAS,EAAI,EAAlB;AAAA,2BACI,QAAC,OAAD;AAAS,MAAA,EAAE,EAAIH;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AA6DD;;KApEMF,Q;AAsEP,eAAeA,QAAf","sourcesContent":["// import TimeAgo from 'timeago-react';\r\n//import { ChatAltIcon } from \"@heroicons/react/outline\";\r\n//import { useState , useContext} from 'react';\r\nimport Comment from './Comment';\r\n//import CommentForm from './CommentForm';\r\n//import RootCommentContext from './RootCommentContext';\r\n\r\nfunction Comments(props) {\r\n\r\n    // const [showCommentForm, setShowCommentForm] = useState(false);\r\n  \r\n    // const comments = props.comments.filter(comment => props.parentId === comment.parentId);\r\n    // const rootCommentInfo = useContext(RootCommentContext);\r\n    const commentId = props.match.params.id;\r\n    return (\r\n      <div className = {''}>\r\n          <Comment id = {commentId}/>\r\n          {/* {comments.map(comment =>{\r\n            const replies = props.comments.filter(reply => reply.parentId === comment._id );\r\n            return(\r\n\r\n\r\n                <div className = \"mb-2\">\r\n\r\n                    <div className = \"flex\">\r\n                        <div className = {'bg-theme_dark-highlight w-8 h-8 rounded-full my-auto'}/>\r\n                        <div className = {' my-auto py-1 ml-1.5 text-theme_dark-alternateBright'}>\r\n                            Posted by <span className = 'font-bold text-theme_dark'>{comment.author} </span> \r\n                            <TimeAgo datetime = {comment.postedAt}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className = \"border-l-2 border-theme_dark-highlight mt-1 ml-4 p-3\">\r\n                        <div className = \"px-2\">\r\n                            {comment.body}\r\n                        </div>\r\n                        <div>\r\n                            <button className = \"flex\" \r\n                                    onClick = {() => setShowCommentForm(comment._id)}\r\n                            >\r\n                                <ChatAltIcon className = \"mt-2 h-6 w-6\"/> \r\n                                <span className = \"my-1 py-2 text-xs\">Reply</span>\r\n                            </button>\r\n                            {\r\n                                comment._id === showCommentForm && (\r\n                                    <CommentForm \r\n                                                showAuthor = {false}\r\n                                                rootId = {props.rootId}\r\n                                                onSubmit = {() => {\r\n                                                                    \r\n                                                                    setShowCommentForm(false);\r\n                                                                    rootCommentInfo.refreshComments(); \r\n                                                                  }\r\n                                                            }\r\n                                                parentId = {comment._id} \r\n                                                onCancel = {e => setShowCommentForm(false)}\r\n                                    />\r\n                                )\r\n                            }\r\n                            {replies.length > 0 && (\r\n                                <Comments comments={props.comments} parentId={comment._id} rootId={props.rootId} />\r\n                            )}\r\n\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n\r\n                );\r\n            })} */}\r\n          \r\n\r\n          \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Comments;"]},"metadata":{},"sourceType":"module"}